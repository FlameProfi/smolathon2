{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nimport AuthService from \"../services/AuthService\";\nexport default class Store {\n  constructor() {\n    this.user = {};\n    this.isAuth = false;\n    this.isLoading = false;\n    makeAutoObservable(this);\n  }\n\n  setAuth(bool) {\n    this.isAuth = bool;\n  }\n\n  setUser(email, userName) {\n    this.user.userName = userName;\n    this.user.email = email;\n  }\n\n  setLoading(bool) {\n    this.isLoading = bool;\n  }\n\n  async login(email, password) {\n    try {\n      const response = await AuthService.login(email, password);\n      console.log(response.data);\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('refreshToken', response.data.refreshToken);\n      this.setAuth(true);\n      this.setUser(response.data.email, response.data.username);\n      return response;\n    } catch (e) {\n      var _e$response, _e$response$data;\n\n      console.log((_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.message);\n    }\n  }\n\n  async registration(email, password) {\n    try {\n      const response = await AuthService.registration(email, password);\n      console.log(response);\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('refreshToken', response.data.refreshToken);\n      this.setAuth(true);\n      this.setUser(response.data.email, response.data.username);\n    } catch (e) {\n      var _e$response2, _e$response2$data;\n\n      console.log((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message);\n    }\n  }\n\n  async logout() {\n    try {\n      const response = await AuthService.logout();\n      localStorage.removeItem('token');\n      this.setAuth(false); // this.setUser({} as IUser);\n    } catch (e) {\n      var _e$response3, _e$response3$data;\n\n      console.log((_e$response3 = e.response) === null || _e$response3 === void 0 ? void 0 : (_e$response3$data = _e$response3.data) === null || _e$response3$data === void 0 ? void 0 : _e$response3$data.message);\n    }\n  }\n\n  async checkAuth() {\n    this.setLoading(true);\n\n    try {\n      // const response = await axios.post<AuthResponse>(`${API_URL}accounts/refresh-token`, {withCredentials: true})\n      var credentialsToken = localStorage.getItem('token');\n      var credentialsRefreshToken = localStorage.getItem('refreshToken');\n      if (!credentialsToken || !credentialsRefreshToken) return;\n      const response = await AuthService.refresh(credentialsToken, credentialsRefreshToken);\n      console.log(response);\n      localStorage.setItem('token', response.data.token);\n      this.setAuth(true);\n      this.setUser(response.data.email, response.data.username);\n    } catch (e) {\n      var _e$response4, _e$response4$data;\n\n      console.log((_e$response4 = e.response) === null || _e$response4 === void 0 ? void 0 : (_e$response4$data = _e$response4.data) === null || _e$response4$data === void 0 ? void 0 : _e$response4$data.message);\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/admin/Desktop/client/src/store/store.ts"],"names":["makeAutoObservable","AuthService","Store","constructor","user","isAuth","isLoading","setAuth","bool","setUser","email","userName","setLoading","login","password","response","console","log","data","localStorage","setItem","token","refreshToken","username","e","message","registration","logout","removeItem","checkAuth","credentialsToken","getItem","credentialsRefreshToken","refresh"],"mappings":"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","sourcesContent":["import {IUser} from \"../models/IUser\";\nimport {makeAutoObservable} from \"mobx\";\nimport AuthService from \"../services/AuthService\";\nimport axios from 'axios';\nimport {AuthResponse} from \"../models/response/AuthResponse\";\nimport {API_URL} from \"../http\";\n\nexport default class Store {\n    user = {} as IUser;\n    isAuth = false;\n    isLoading = false;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    setAuth(bool: boolean) {\n        this.isAuth = bool;\n    }\n\n    setUser(email: string, userName: string) {\n        this.user.userName = userName;\n        this.user.email = email;\n    }\n\n    setLoading(bool: boolean) {\n        this.isLoading = bool;\n    }\n\n    async login(email: string, password: string) {\n        try {\n            const response = await AuthService.login(email, password);\n            console.log(response.data)\n            localStorage.setItem('token', response.data.token);\n            localStorage.setItem('refreshToken', response.data.refreshToken);\n            this.setAuth(true);\n            this.setUser(response.data.email, response.data.username);\n            return response;\n        } catch (e) {\n            console.log(e.response?.data?.message);\n        }\n    }\n\n    async registration(email: string, password: string) {\n        try {\n            const response = await AuthService.registration(email, password);\n            console.log(response)\n            localStorage.setItem('token', response.data.token);\n            localStorage.setItem('refreshToken', response.data.refreshToken);\n            this.setAuth(true);\n            this.setUser(response.data.email, response.data.username);\n        } catch (e) {\n            console.log(e.response?.data?.message);\n        }\n    }\n\n    async logout() {\n        try {\n            const response = await AuthService.logout();\n            localStorage.removeItem('token');\n            this.setAuth(false);\n            // this.setUser({} as IUser);\n        } catch (e) {\n            console.log(e.response?.data?.message);\n        }\n    }\n\n    async checkAuth() {\n        this.setLoading(true);\n        try {\n            // const response = await axios.post<AuthResponse>(`${API_URL}accounts/refresh-token`, {withCredentials: true})\n            var credentialsToken = localStorage.getItem('token');\n            var credentialsRefreshToken = localStorage.getItem('refreshToken');\n            if(!credentialsToken || !credentialsRefreshToken) return;\n            const response = await AuthService.refresh(credentialsToken, credentialsRefreshToken);\n            console.log(response);\n            localStorage.setItem('token', response.data.token);\n            this.setAuth(true);\n            this.setUser(response.data.email, response.data.username);\n        } catch (e) {\n            console.log(e.response?.data?.message);\n        } finally {\n            this.setLoading(false);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}